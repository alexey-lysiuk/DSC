Class TabletDecor : Actor
{
	Default
	{
		+NoInteraction;
	}
	States
	{
		Spawn:
			TNT1 A 1 {
					A_SpawnItemEx("MorFlareRed", random(-16, 16), random(-16, 16), random(0, 40), 0, 0, frandom(1, 2),0,SXF_NOCHECKPOSITION, 128, 0);
					A_SpawnItemEx("GiveAMMOsparckle", random(-16, 16), random(-16, 16), random(0, 40), frandom(-1,1), frandom(-1,1), frandom(2,4),0,SXF_NOCHECKPOSITION, 128, 0);

				ThinkerIterator it = ThinkerIterator.Create("PlayerPawn");
				PlayerPawn this;
				while(this = PlayerPawn(it.Next())){
					if(self.Distance2D(this)<48){
						CallACS("PressUse",0,0,0);
					}
				}
			}
			Loop;
	}

}


Class IncomeWindGenHellGround : SwitchableDecoration
{
	Default
	{
		radius 4;
		+NoGravity;
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Goto Inactive;
		Loop;

		Active:
			TNT1 A 2
			{
				A_SpawnItemEx("IncomeWindHellGround", Random(-256, 256), -2500, Random(0, 24), 0, Frandom(15, 30), 0, 0, SXF_NOCHECKPOSITION, 0, 0);

			}
		LOOP;
		Inactive:
			TNT1 A 1;
			Loop;

	}
}
Class IncomeWindGenHell : SwitchableDecoration
{
	Default
	{
		radius 4;
		+NoGravity;
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Goto Inactive;
		Loop;

		Active:
			TNT1 A 1
			{
				for (int i = 0; i < 1; i++){
					A_SpawnItemEx("IncomeWindHell", Random(-128, 128), -2500, Random(-256, 256), 0, Frandom(15, 30), 0, 0, SXF_NOCHECKPOSITION, 0, 0);
				}
			}
		LOOP;
		Inactive:
			TNT1 A 1;
			Loop;

	}
}
Class IncomeWindGen : SwitchableDecoration
{
	Default
	{
		radius 4;
		+NoGravity;
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Goto Inactive;
		Loop;

		Active:
			TNT1 A 1
			{
				for (int i = 0; i < 1; i++){
					A_SpawnItemEx("IncomeWind", Random(-128, 128), -2500, Random(-256, 256), 0, Frandom(15, 30), 0, 0, SXF_NOCHECKPOSITION, 0, 0);
				}
			}
		LOOP;
		Inactive:
			TNT1 A 1;
			Loop;

	}
}

Class IncomeWindHellGround : IncomeWindHell
{
	Default
	{
		+FLATSPRITE;
		-WALLSPRITE;
	}
}

Class IncomeWindHell : IncomeWind
{
	States
	{
	  Spawn:
		MOR5 A 1 ParticleLife();
		Loop;
	 }
}
Class IncomeWind : Actor
{
	float ScaleMultiplerMin;
	float ScaleMultiplerMax;
	float ScaleSpeed;
	float FadeoutSpeed;
	float FadeInSpeed;
	float MaxAlpha;
	bool startFade;
	Default
	{
		Scale 2.0;
		+NoInteraction;
		+WALLSPRITE;
		-SOLID;
		Renderstyle "Add";
		alpha 0.0;
	}
	Override void PostBeginPlay()
	{
		MaxAlpha = 1.0;
		ScaleMultiplerMax = 0.6;
		ScaleMultiplerMin = 1.0;
		FadeoutSpeed = 0.01;
		FadeInSpeed = 0.002;
		A_SetScale(Frandom(scaleX*ScaleMultiplerMin, scaleX*ScaleMultiplerMax));
		startFade = false;
		Super.PostBeginPlay();
	}
	virtual void ParticleLife()
	{
		if(startFade){
			A_fadeOut(FadeoutSpeed, true);
		} else {
			A_fadeTo(MaxAlpha, FadeInSpeed);
		}

		if(self.alpha>=MaxAlpha && !startFade){
			startFade = true;
		}
	}

	States
	{
	  Spawn:
		MOR4 A 1 ParticleLife();
		Loop;
	 }
}


Class DSClastLight : SwitchableDecoration
{
	Default
	{
		radius 16;
		+NoInteraction;
		+ClientSideOnly;
		+WALLSPRITE
		Renderstyle "Add";
		Scale 1.0;
		Alpha 0.0;
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Goto Inactive;
	Active:
		LLLL A 1 A_fadeTo(0.5, 0.002);
		Loop;
	Inactive:
		TNT1 A 1;
		Loop;
	}


}


Class GellGateFire : SwitchableDecoration
{
	Default
	{
		radius 4;
		+NoGravity;
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Goto Inactive;
		Loop;

		Active:
			TNT1 A 1
			{
				A_Playsound("world/BigFire", 1, 0.3, 1);
				for (int i = 0; i < 10; i++){
					A_SpawnItemEx("FireFlameGreat", 0, Random(-128, 128), Random(-384, 384), Frandom(15, 30), 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0);
				}
			}
		LOOP;
		Inactive:
			TNT1 A 1;
			Loop;

	}
}


Class DSChine : SwitchableDecoration
{
	Default
	{
		radius 16;
		+NoInteraction;
		+ClientSideOnly;
		+FLATSPRITE;
		Renderstyle "Add";
		Scale 0.2;
		RenderRadius 500000;
	}
	States
	{
	Spawn:
		SHNE A 1;
		Loop;
	Active:
		SHNE A 1 A_fadeTo(0.6, 0.002);
		Loop;
	Inactive:
		SHNE A 1 A_fadeOut(0.005, FTF_CLAMP);
		Loop;
	}


}
Class DSCsunshine : SwitchableDecoration
{
	Default
	{
		radius 16;
		+NoInteraction;
		+FLATSPRITE;
		+ClientSideOnly;
		Renderstyle "Add";
		Scale 0.2;
	}
	States
	{
	Spawn:
		SHNE B 1;
		Loop;
	Active:
		SHNE B 1 A_fadeIn(0.002, FTF_CLAMP);
		Loop;
	Inactive:
		SHNE B 1 A_fadeOut(0.005, FTF_CLAMP);
		Loop;
	}
}
Class DSCdarker : Actor
{
	Default
	{
		radius 16;
		+NoInteraction;
		+ClientSideOnly;
		+WALLSPRITE;
		Renderstyle "Translucent";
		Scale 0.2;
	}
	States
	{
	Spawn:
		DRK0 A 1;
		Loop;
	}
}
Class DSCmarsDOWN : Actor
{
	Default
	{
		radius 16;
		+NoInteraction;
		+ClientSideOnly;
		+WALLSPRITE;
		Renderstyle "Add";
		Scale 0.2;
	}
	States
	{
	Spawn:
		DWN0 A 1;
		Loop;
	}
}



Class DSCpriborHolo : SwitchableDecoration
{
	Default
	{
		radius 16;
		+NoInteraction;
		+ClientSideOnly;
		+WALLSPRITE;
		Renderstyle "Add";
		Scale 0.5;
	}
	States
	{
	Spawn:
		TNT1 A 1 NODELAY A_Jump(256, Args[0]?Args[0]:1);
		PRIB A 1  A_Jump(256, 2);
		PRIB B 1;
		GOTO Active;
	Active:
		"####" "#" 1;
		Loop;
	Inactive:
		"####" "#" 1;
		Loop;
	}
}


Class DSChellStrikeGEN : SwitchableDecoration
{
	Default
	{
		radius 64;
		+NoInteraction;
		+ClientSideOnly;
	}
	States
	{
	Spawn:
		TNT1 A 0;
		GOTO Inactive;
	Active:
		TNT1 A 1
			{
				A_SpawnItemEx("DSChellSrtike2", random(-64,64), random(-64,64), -128, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 250, 0 );
			}
		Loop;
	Inactive:
		TNT1 A 1;
		Loop;
	}
}

Class DSChellWindcloudsGen : SwitchableDecoration
{
	//Args[0] - radius
	//Args[1] - iterationNumber
	//Args[2] - maxSpawnHeight
	//Args[3] - type of clouds

	int radius;
	int iterationNumber;
	Array<string> type;
	int Front;
	Default
	{
		radius 64;
		+NoBlockMap;
		+NoGravity;
		+NoSector;
		+NoInteraction;
		+NoClip;
		-Solid;
		+ClientSideOnly;

		alpha 0.0;
	}

	Override void PostBeginPlay()
	{
		Front = Args[4]?Args[4]:384;
		type.Push("DSCredCloud");
		type.Push("DSCwinterCloud");
		type.Push("DSChellwindCloud");
		radius = Args[0]?Args[0]:256;
		iterationNumber = Args[1]?Args[1]:1;
		Super.PostBeginPlay();

	}

	void SpawnClouds()
	{
		for (int i = 0; i < iterationNumber; i++)
		{
			A_SpawnItemEx(type[Args[3]?Args[3]:0], Random(-Front, Front), Random(-radius, radius), Random(-16, Args[2]), 16, 0, 0, 0, SXF_NOCHECKPOSITION, 128, 0 );
		}
	}

	States
	{
	Spawn:
		TNT1 A 1;
		GOTO Inactive;
	Active:
		TNT1 A 1
		{
			SpawnClouds();
		}
		Loop;
	Inactive:
		TNT1 A 1;
		Loop;
	}

}


Class DSCportalSoul : Actor
{
	Default
	{
		Scale 0.25;
		Alpha 0.5;
		Renderstyle "Subtract";
		+NOGRAVITY;
		+FLOAT;
		Speed 8;
	}
	States
	{
		Spawn:
			SCL5 A 1
			{
				A_WANDER();
				A_SpawnItemEx("DSCportalSoulCloud", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 64, 0 );

			}
		Loop;
	}
}
Class DSCportalSoulCloud : Actor
{
	float ScaleMultiplerMin;
	float ScaleMultiplerMax;
	float ScaleSpeed;
	float FadeoutSpeed;

	bool startFade;
	Default
	{
		+NoInteraction;
		+FORCEXYBILLBOARD;
		-SOLID;
		Renderstyle "Subtract";
		alpha 0.2;
	}
	Override void PostBeginPlay()
	{
		ScaleMultiplerMax = 1.0;
		ScaleMultiplerMin = 1.5;
		ScaleSpeed = 0.010;
		FadeoutSpeed = 0.01;
		A_SetScale(0.2, 0.2);
		Super.PostBeginPlay();
	}
	virtual void ParticleLife()
	{
		A_fadeOut(FadeoutSpeed, true);
		A_SetScale(scaleX+ScaleSpeed);
	}

	States
	{
	  Spawn:
		MOR3 A 1 ParticleLife();
		Loop;
	 }
}

Class DSChellSrtike2 : DSChellSrtike
{
	Default
	{
		YScale 0.1;
		XScale 0.1;
		RenderStyle "Add";
		+NOINTERACTION;
	}
	States
	{
		Spawn:
			HLTR A 1
			{
				scale.Y+=0.02;
				scale.X=frandom(0.1, 0.2);
				A_fadeOut(0.03);
			}
		Loop;
	}
}
Class DSChellSrtike : Actor
{
	Default
	{
		Scale 0.5;
		RenderStyle "Add";
		+NOINTERACTION;
	}
	States
	{
		Spawn:
			HLTR A 1
			{
				scale.Y+=0.05;
				scale.X=frandom(0.1, 0.5);
				A_fadeOut(0.03);
			}
		Loop;
	}
}

Class  DSCbigPortalGliphBig : Actor
{
	int Rotation;
	Default
	{
		Scale 0.05;
		+ROLLSPRITE;
		RenderStyle "Add";
		+NOINTERACTION;
		+FLATSPRITE;
	}
	Override void PostBeginPlay()
	{
		if(random(0, 1)){
			Rotation = 15;
		} else {Rotation = -15;}
		A_QuakeEx(8,8,0,20,0,512,"",QF_SCALEDOWN);
	}
	Action Void SpawnBurstSparks(int count = 10)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("DSCExplosionSpark", random(-8*scale.Y*10, 8*scale.Y*10), random(-8*scale.Y*10, 8*scale.Y*10), random(-8*scale.Y*10, 8*scale.Y*10), frandom(-12,12), frandom(-12,12), frandom(-12,12),0,SXF_NOCHECKPOSITION);
		}
	}
	States
	{
		Spawn:
			HRNG A 1
			{
				A_SetRoll(roll+Rotation,SPF_INTERPOLATE);
				scale.Y+=0.04;
				scale.X+=0.04;
				SpawnBurstSparks(10);
				A_fadeOut(0.03);
			}
		Loop;
	}
}
Class DSCbigPortalLightning : Actor
{
	Default
	{
		Scale 1.0;
		+NoInteraction;
		-SOLID;
		Renderstyle "Add";
		alpha 1.0;
	}
	States
	{
	  Spawn:
		HLT0 A 1 {
				A_PlaySound("world/Thunder1");
				A_fadeOut(0.05, true);
			}
		Loop;
	 }
}

Class DSChellCloudMask : Actor
{
	Default
	{
		Scale 1.0;
		+NoInteraction;
		+FLATSPRITE;
		Renderstyle "Translucent";
		alpha 1.0;
	}


	States
	{
	  Spawn:
		CI1L D 1;
		Loop;
	 }
}

Class DSCbigPortalTwist : Actor
{
	float ScaleMultiplerMin;
	float ScaleMultiplerMax;
	float RollSpeed;
	float ScaleSpeed;
	float FadeoutSpeed;
	float FadeinSpeed;
	float MaxAlpha;

	bool startFade;
	Default
	{
		Scale 1.0;
		+NoInteraction;
		+Rollsprite;
		+FORCEXYBILLBOARD;
		+FLATSPRITE;
		-SOLID;
		Renderstyle "Translucent";
		alpha 0.0;
	}
	Override void PostBeginPlay()
	{
		MaxAlpha = 0.3;
		ScaleMultiplerMax = 1.5;
		ScaleMultiplerMin = 0.7;
		ScaleSpeed = 0.010;
		FadeoutSpeed = 0.002;
		FadeinSpeed = 0.1;
		RollSpeed = 5.0;
		A_SetScale(0, 0);
		RollSpeed = FRandom(1, RollSpeed);
		A_SetRoll(random(0, 360));
		startFade = false;
		Super.PostBeginPlay();
	}
	virtual void ParticleLife()
	{
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		if(startFade){
			A_fadeOut(FadeinSpeed, true);
		} else {
			A_fadeTo(MaxAlpha, FadeoutSpeed);
		}
		if(self.alpha>=MaxAlpha && !startFade){
			startFade = true;
		}
		A_SetScale(scaleX+ScaleSpeed);

		//A_fadeTo(0.3, FadeoutSpeed);
	}

	States
	{
	  Spawn:
		CI1L B 1 ParticleLife();
		Loop;
	 }
}
Class DSCbigPortalTwist2 : Actor
{
	float ScaleMultiplerMin;
	float ScaleMultiplerMax;
	float RollSpeed;
	float ScaleSpeed;
	float FadeoutSpeed;
	float FadeinSpeed;
	float MaxAlpha;

	bool startFade;
	Default
	{
		Scale 0.1;
		+NoInteraction;
		+Rollsprite;
		+FORCEXYBILLBOARD;
		+FLATSPRITE;
		-SOLID;
		Renderstyle "Add";
		alpha 0.0;
	}
	Override void PostBeginPlay()
	{
		MaxAlpha = 1.0;
		ScaleMultiplerMax = 1.0;
		ScaleMultiplerMin = 0.7;
		ScaleSpeed = 0.010;
		FadeoutSpeed = 0.01;
		FadeinSpeed = 0.2;
		RollSpeed = 5.0;
		A_SetScale(0, 0);
		RollSpeed = FRandom(1, RollSpeed);
		A_SetRoll(random(0, 360));
		startFade = false;
		Super.PostBeginPlay();
	}
	virtual void ParticleLife()
	{
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		if(startFade){
			A_fadeOut(FadeinSpeed, true);
		} else {
			A_fadeTo(MaxAlpha, FadeoutSpeed);
		}
		if(self.alpha>=MaxAlpha && !startFade){
			startFade = true;
		}
		A_SetScale(scaleX+ScaleSpeed);

		//A_fadeTo(0.3, FadeoutSpeed);
	}

	States
	{
	  Spawn:
		CI1L C 1 ParticleLife();
		Loop;
	 }
}
Class DSCbigPortal : SwitchableDecoration
{
	int SoulsSpawned;
	Default
	{
		radius 32;
		-SOLID;
		+NoGravity;
		+ClientSideOnly;
	}
	States
	{
	Spawn:
		TNT1 A 0;
		GOTO Inactive;
	Active:
		TNT1 A 1
			{

				for(int i = 0; i < 1; i++)
				{
					A_SpawnItemEx("DSCbigPortalTwist", random(-128,128), random(-128,128), random(-32,32), frandom(-2,2), frandom(-2,2), frandom(-1,1),0,SXF_NOCHECKPOSITION, 240, 0 );
					A_SpawnItemEx("DSCbigPortalTwist2", 0, 0, random(-32,1), frandom(-0.5,0.5), frandom(-0.5,0.5), frandom(0.0,0.5),0,SXF_NOCHECKPOSITION, 200, 0 );
					A_SpawnItemEx("DSCbigPortalLightning", random(-512,512), random(-512,512), random(-256,128), 0, 0, 0, 0, SXF_NOCHECKPOSITION, 250, 0 );

					if(random(1, 100)==100){
						A_PlaySound("BigPortalGliph", CHAN_WEAPON, 1.0, false, ATTN_NONE);
						A_SpawnItemEx("DSCbigPortalGliphBig", 0, 0, random(-256, -128), 0, 0, 0, 0,SXF_NOCHECKPOSITION, 0, 0);
						A_Explode(damage:random(4, 8), distance:384, flags:XF_NOTMISSILE);
						A_Blast(strength:256, radius:128);
						A_SpawnItemEx("DSChellSrtike", random(-16,16), random(-16,16), -270, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0 );
						A_SpawnItemEx("DSChellSrtike", random(-16,16), random(-16,16), -270, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0 );
						if(SoulsSpawned<10){
							A_SpawnItemEx("DSCportalSoul", random(-16,16), random(-16,16), -384, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, tid );
							SoulsSpawned++;
						}

					}
				}
			}
		Loop;
	Inactive:
		TNT1 A 1;
		Loop;
	}
}



Class DSCportalSparkGen : SwitchableDecoration
{
	Default
	{
		radius 32;
		-SOLID;
		+NoGravity;
		+ClientSideOnly;
	}
	States
	{
	Spawn:
		TNT1 A 0;
		GOTO Inactive;
	Active:
		TNT1 A 1
			{
				for(int i = 0; i < 5; i++)
				{
					A_SpawnItemEx("DSCportalSpark", random(16, 16), random(16, 16), random(16, 16), frandom(-8,8), frandom(-8,8), frandom(-2,0),0,SXF_NOCHECKPOSITION);

				}
			}
		Loop;
	Inactive:
		TNT1 A 1;
		Loop;
	}
}

Class DSCportalSpark : Actor
{
	Default
	{
	Alpha 1.0;
	Scale 0.15;
	RenderStyle "Add";
	BounceType "Grenade";
	BounceCount 3;
	Mass 9;
	BounceFactor 0.3;
	Gravity 1.0;
	+FORCEXYBILLBOARD;

	}
	States
	{
		Spawn:
			TNT1 A 1 A_Jump(256, "S1", "S2", "S3");
			Loop;
		S1:
			SRS2 A 1;
			GOTO Halt;
		S2:
			SRS3 A 1;
			GOTO Halt;
		S3:
			SRS4 A 1;
			GOTO Halt;
		Halt:
			"####" "A" 1 BRIGHT
			{
				A_FadeOut(0.03);
			}
			LOOP;
		Death:
			TNT1 A 1;
			stop;
	}
}


Class DSCwinterFloor : Actor
{
	double StartAlpha;
	double Delta;

	Default{
		+WALLSPRITE;
		-SOLID;
		+NoGravity;
		RenderStyle "Add";
		Scale 1.0;
	}
	Override void PostBeginPlay()
	{
		StartAlpha = self.alpha;
		Delta = self.alpha/100*(Args[0]?Args[0]:70);
		Super.PostBeginPlay();
	}
	void blinker()
	{
		if(random(0, 10)>=5){

			A_fadeTo(StartAlpha + frandom(-Delta, Delta), 0.02);
		}
	}
	States
	{
		Spawn:
			WFL1 A 1 blinker();
			Loop;
	}
}
Class DSCuac : Actor
{
	double StartAlpha;
	double Delta;

	Default{
		+WALLSPRITE;
		-SOLID;
		+NoGravity;
		RenderStyle "Add";
		Scale 0.2;
	}
	Override void PostBeginPlay()
	{
		StartAlpha = self.alpha;
		Delta = self.alpha/100*(Args[0]?Args[0]:50);
		Super.PostBeginPlay();
	}
	void blinker()
	{
		if(random(0, 10)>=5){

			A_fadeTo(StartAlpha + frandom(-Delta, Delta), 0.01);
		}
	}
	States
	{
		Spawn:
			UACA A 1 blinker();
			Loop;
	}
}

Class DSCsteamFASTgen : DSCsnowGen
{
	//Args[0] - MinSpeed
	//Args[1] - MaxSpeed
	//Args[2] - iterationNumber
	//Args[3] - failChance
	int MinSpeed;
	int MaxSpeed;
	int failChance;
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		MinSpeed = Args[0]?Args[0]:1;
		MaxSpeed = Args[1]?Args[1]:2;
		iterationNumber = Args[2]?Args[2]:1;
		failChance = Args[3]?Args[3]:128;
	}
	void SpawnSteam()
	{
		for (int i = 0; i < iterationNumber; i++)
		{
			A_SpawnItemEx("DSCfastSteamCloud", 0, 0, 0, FRandom(MinSpeed, MaxSpeed), 0, 0, 0, SXF_CLIENTSIDE, failChance, 0 );
		}
	}
	States
	{
		Active:
			TNT1 A 1
			{
				SpawnSteam();
			}
			Loop;
	}
}


Class DSCfastSteamCloud : Actor
{
	float ScaleMultiplerMin;
	float ScaleMultiplerMax;
	float RollSpeed;
	float ScaleSpeed;
	float FadeoutSpeed;
	float FadeinSpeed;
	float MaxAlpha;

	bool startFade;
	Default
	{
		Scale 0.01;
		+NoInteraction;
		+Rollsprite;
		+FORCEXYBILLBOARD;
		-SOLID;
		Renderstyle "Translucent";
		alpha 0.0;
	}
	Override void PostBeginPlay()
	{
		MaxAlpha = 0.3;
		ScaleMultiplerMax = 1.0;
		ScaleMultiplerMin = 1.5;
		ScaleSpeed = 0.010;
		FadeoutSpeed = 0.01;
		FadeinSpeed = 0.1;
		RollSpeed = 1.0;
		A_SetScale(0, 0);
		RollSpeed = FRandom(-RollSpeed, RollSpeed);
		A_SetRoll(random(0, 360));
		startFade = false;
		Super.PostBeginPlay();
	}
	virtual void ParticleLife()
	{
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		if(startFade){
			A_fadeOut(FadeinSpeed, true);
		} else {
			A_fadeTo(MaxAlpha, FadeoutSpeed);
		}
		if(self.alpha>=MaxAlpha && !startFade){
			startFade = true;
		}
		A_SetScale(scaleX+ScaleSpeed);

		//A_fadeTo(0.3, FadeoutSpeed);
	}

	States
	{
	  Spawn:
		MOR3 A 1 ParticleLife();
		Loop;
	 }
}


Class DSCsteamSLOWgen : DSCsnowGen
{
	//Args[0] - radius
	//Args[1] - iterationNumber
	//Args[2] - maxSpawnY
	//Args[3] - failChance;
	int maxSpawnY;
	int failChance;
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		radius = Args[0]?Args[0]:24;
		iterationNumber = Args[1]?Args[1]:1;
		maxSpawnY = Args[2]?Args[2]:24;
		failChance = Args[3]?Args[3]:0;
	}
	void SpawnSteam()
	{
		for (int i = 0; i < iterationNumber; i++)
		{
			A_SpawnItemEx("DSCslowSteamCloud", Random(-radius, radius), Random(-maxSpawnY, maxSpawnY), Random(-8, 8), FRandom(0, 0), FRandom(0, 0), FRandom(1, 2), 0, SXF_CLIENTSIDE, failChance, 0  );
		}
	}
	States
	{
		Active:
			TNT1 A 1
			{
				SpawnSteam();
			}
			Loop;

	}

}
Class DSCslowSteamCloud : DSCredCloud
{
	Default
	{
		Scale 1.0;
	}
	Override void PostBeginPlay()
	{
		MaxAlpha = 0.15;
		Super.PostBeginPlay();
	}

	States
	{
	  Spawn:
		MOR3 A 1 ParticleLife();
		Loop;
	 }
}


Class DSCflatFAN1 : SwitchableDecoration
{
	Default
	{
		radius 32;
		+Rollsprite;
		-SOLID;
		+NoGravity;
		+ClientSideOnly;
		+FLATSPRITE;
		Scale 1.0;
	}
	States
	{
	Spawn:
		FA1N A 1;
		GOTO Active;
	Active:
		FA1N A 1
			{
				A_SetRoll(roll+1,SPF_INTERPOLATE);
				roll%=360;
			}
		Loop;
	Inactive:
		FA1N A 1;
		Stop;
	}
}

Class DSCflatFAN2 : DSCwallFAN1
{
	Default
	{
		+FLATSPRITE;
		-WALLSPRITE;
	}
}

Class DSCwallFAN1shade : DSCwallFAN1
{
	Default
	{
		Renderstyle "Translucent";
		Alpha 1.0;
		Scale 0.2;
	}
	States
	{
	Spawn:
		FA2N B 1;
		GOTO Active;
	}
}
Class DSCwallFAN1 : SwitchableDecoration
{
	Default
	{
		radius 32;
		+Rollsprite;
		-SOLID;
		+NoGravity;
		+ClientSideOnly;
		+WALLSPRITE;
		Scale 0.1;
	}
	States
	{
	Spawn:
		FA2N A 1;
		GOTO Active;
	Active:
		"####" "#" 1
			{

				A_Playsound("world/FastFun", 1, 0.3, 1);
				A_SetRoll(roll+8,SPF_INTERPOLATE);
			}
		Loop;
	Inactive:
		"####" "#" 1;
		Stop;
	}
}
class DSCfanLamp : Actor
{
	Default
	{
		radius 32;
		-SOLID;
		+NoGravity;
		+ClientSideOnly;
		+FLATSPRITE;
		Scale 1.0;
	}
	States
	{
	Spawn:
		FNLM A -1;
		STOP;
	}
}

Class DSCinfo : SwitchableDecoration
{
	DestroyIterator dIt;


	Default
	{
		radius 32;
		+NoInteraction;
		+ClientSideOnly;
		+FLATSPRITE;
		Scale 0.1;
	}

	virtual void InitDestroyer()
	{
		dIt.Init(self);
		dIt.DestroyActors("DscinfoRay", 16);
		dIt.DestroyActors("DSCinfoCircle1", 16);
		dIt.DestroyActors("DSCinfoCircle2", 16);
		dIt.DestroyActors("DSCinfoStend", 16);
	}

	States
	{
	Spawn:
		DSCC C 1;
		GOTO Active;
	Active:
		DSCC C 1
		{
			A_SpawnItemEx("DscinfoRay", 0, 0, 0, 0, 0, 0 );
			A_SpawnItemEx("DSCinfoStendShade", 0, 0, 32, 0, 0, 0 );
			A_SpawnItemEx("DSCinfoCircle1", 0, 0, 32, 0, 0, 0 );
			A_SpawnItemEx("DSCinfoCircle2", 0, 0, 32, 0, 0, 0 );
			Bool a; Actor stend;
			[a, stend] = A_SpawnItemEx("DSCinfoStend", 0, 0, 4, 0, 0, 0 );
			if(a){
				stend.frame = Args[0]?Args[0]:0;
			}
		}
		DSCC C -1;
		Stop;
	Inactive:
		DSCC C 1 {self.InitDestroyer();}
		Stop;
	}
}

Class DSCinfoStendShade : Actor
{
	int spr;
	Default{
		+WALLSPRITE;
		-SOLID;
		+NoGravity;
		RenderStyle "Subtract";
		Alpha 0.5;
		Scale 0.1;
	}
	States
	{
		Spawn:
			DSCS A 1;
			Loop;
	}
}
Class DSCinfoStend : Actor
{
	Default{
		+WALLSPRITE;
		-SOLID;
		+NoGravity;
		RenderStyle "Add";
		Scale 0.1;
	}
	States
	{
		Spawn:
			DSCI A 1 NODELAY A_Jump(256, "SpawnLoop");
			DSCI B 1 A_Jump(256, "SpawnLoop");
			DSCI C 1 A_Jump(256, "SpawnLoop");
		SpawnLoop:
			"####" "#" 1;
			Loop;

	}
}


Class DSCrotator : Actor {
	float RollSpeed;

	Default{
		+Rollsprite;
		+WALLSPRITE;
		-SOLID;
		+NoGravity;
		RenderStyle "Add";
		Alpha 0.3;
		Scale 0.2;
	}
	Override void PostBeginPlay()
	{
		RollSpeed = 1.0;
		//RollSpeed = FRandom(-RollSpeed, RollSpeed);
		A_SetRoll(random(0, 360));
		Super.PostBeginPlay();
	}

}


Class DSCinfoCircle1 : DSCrotator
{
	Override void PostBeginPlay()
	{
		RollSpeed = 1.0;
		Super.PostBeginPlay();
	}
	States
	{
	Spawn:
		DSCC A 1
			{
				A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
				roll%=360;
			}
		 Loop;
	}
}

Class DSCinfoCircle2 : DSCrotator
{
	Override void PostBeginPlay()
	{
		RollSpeed = -1.0;
		Super.PostBeginPlay();
	}
	States
	{
	Spawn:
		DSCC B 1
			{
				A_SetRoll(roll-RollSpeed,SPF_INTERPOLATE);
				roll%=360;
			}
		 Loop;
	}
}

Class DscinfoRay : Actor
{
	Default
	{
		Scale 0.25;
		YScale 0.15;
		+FORCEYBILLBOARD;
		+NOGRAVITY;
		-SOLID;
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		LTS4 A 1;
		LOOP;
	}

}




Class DSCsnowGen : SwitchableDecoration
{
	//Args[0] - radius
	//Args[1] - iterationNumber
	//Args[2] - maxSpawnHeight
	//Args[3] - type of clouds
	int radius;
	int iterationNumber;

	Default
	{
		radius 64;
		+NoBlockMap;
		+NoGravity;
		+NoSector;
		+NoInteraction;
		+NoClip;
		-Solid;
		+ClientSideOnly;

		alpha 0.0;
	}

	Override void PostBeginPlay()
	{
		radius = Args[0]?Args[0]:256;
		iterationNumber = Args[1]?Args[1]:1;
		Super.PostBeginPlay();

	}

	void SpawnClouds()
	{
		for (int i = 0; i < iterationNumber; i++)
		{
			A_SpawnItemEx("DSCsnow", Random(-radius, radius), Random(-radius, radius), Random(-8, Args[2]), FRandom(-1, 1), FRandom(-1, 1), FRandom(-2, -1)  );
		}
	}

	States
	{
	Spawn:
		TNT1 A 1;
		GOTO Inactive;
	Active:
		TNT1 A 1
		{
			SpawnClouds();
		}
		Loop;
	Inactive:
		TNT1 A 1;
		Loop;
	}

}
Class DSCsnow : Actor
{
	float RollSpeed;

	Default{
		+Rollsprite;
		+FORCEXYBILLBOARD;
		-SOLID;
		+DONTSPLASH;
		+Missile;
		+NoBlockMap;
		+NoGravity;
		Height 2;
		Radius 2;
		Renderstyle "Translucent";
		Alpha 1.0;
		Scale 0.2;
	}
	Override void PostBeginPlay()
	{
		RollSpeed = 3.0;
		A_SetScale(Frandom(0.05, 0.2));
		RollSpeed = FRandom(-RollSpeed, RollSpeed);
		A_SetRoll(random(0, 360));
		Super.PostBeginPlay();
	}
  States
  {
  Spawn:
   SNWT A 1
	{
		A_JumpIf(WaterLevel > 0, "Death");
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
	}
    Loop;
  Death:
	TNT1 A 0;
    Stop;
  }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
Class DSCcloudsGen : SwitchableDecoration
{
	//Args[0] - radius
	//Args[1] - iterationNumber
	//Args[2] - maxSpawnHeight
	//Args[3] - type of clouds
	//Args[4] - failchance
	int radius;
	int iterationNumber;
	Array<string> type;

	Default
	{
		radius 64;
		+NoBlockMap;
		+NoGravity;
		+NoSector;
		+NoInteraction;
		+NoClip;
		-Solid;
		+ClientSideOnly;

		alpha 0.0;
	}

	Override void PostBeginPlay()
	{
		type.Push("DSCredCloud");
		type.Push("DSCwinterCloud");
		radius = Args[0]?Args[0]:256;
		iterationNumber = Args[1]?Args[1]:1;
		Super.PostBeginPlay();

	}

	void SpawnClouds()
	{
		for (int i = 0; i < iterationNumber; i++)
		{
			A_SpawnItemEx(type[Args[3]?Args[3]:0], Random(-radius, radius), Random(-radius, radius), Random(-8, Args[2]), 0, 0, 0, 0, SXF_NOCHECKPOSITION, Args[4]?Args[4]:0, 0 );
		}
	}

	States
	{
	Spawn:
		TNT1 A 1;
		GOTO Inactive;
	Active:
		TNT1 A 1
		{
			SpawnClouds();
		}
		Loop;
	Inactive:
		TNT1 A 1;
		Loop;
	}

}

Class DSChellwindCloud : DSCredCloud
{
	Default
	{
		xScale 7.0;
		yScale 1.0;
		-Rollsprite;
	}
	Override void PostBeginPlay()
	{
		MaxAlpha = 0.1;
		Super.PostBeginPlay();
		scale.X = 10.0;
	}
	virtual void ParticleLife2()
	{
		if(startFade){
			A_fadeOut(FadeoutSpeed, true);
		} else {
			A_fadeTo(MaxAlpha, FadeoutSpeed);
		}

		if(self.alpha>=MaxAlpha && !startFade){
			startFade = true;
		}

	}
	States
	{
	  Spawn:
		MOR2 A 1 ParticleLife2();
		Loop;
	 }
}

Class DSCwinterCloud : DSCredCloud
{
	Default
	{
		Scale 3.0;
	}
	Override void PostBeginPlay()
	{
		MaxAlpha = 0.15;
		Super.PostBeginPlay();
	}

	States
	{
	  Spawn:
		MOR3 A 1 ParticleLife();
		Loop;
	 }
}

Class DSCredCloud : Actor
{
	float ScaleMultiplerMin;
	float ScaleMultiplerMax;
	float RollSpeed;
	float ScaleSpeed;
	float FadeoutSpeed;
	float MaxAlpha;
	bool startFade;
	Default
	{
		Scale 10.0;

		+NoInteraction;
		+Rollsprite;
		+FORCEXYBILLBOARD;
		-SOLID;
		Renderstyle "Translucent";
		alpha 0.0;
	}
	Override void PostBeginPlay()
	{
		MaxAlpha = 0.2;
		ScaleMultiplerMax = 0.6;
		ScaleMultiplerMin = 1.0;
		FadeoutSpeed = 0.002;
		RollSpeed = 1.0;
		A_SetScale(Frandom(scaleX*ScaleMultiplerMin, scaleX*ScaleMultiplerMax));
		RollSpeed = FRandom(-RollSpeed, RollSpeed);
		A_SetRoll(random(0, 360));
		startFade = false;
		Super.PostBeginPlay();
	}
	virtual void ParticleLife()
	{
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		if(startFade){
			A_fadeOut(FadeoutSpeed, true);
		} else {
			A_fadeTo(MaxAlpha, FadeoutSpeed);
		}

		if(self.alpha>=MaxAlpha && !startFade){
			startFade = true;
		}
		//A_fadeTo(0.3, FadeoutSpeed);
	}

	States
	{
	  Spawn:
		MOR2 A 1 ParticleLife();
		Loop;
	 }
}

Class Bif_Haze_Gen : Actor
{
	//Args[0] - radius
	//Args[1] - iterationNumber
	//Args[2] - maxSpawnHeight
	int radius;
	int iterationNumber;

	Default
	{
		radius 64;
		+NoBlockMap;
		+NoGravity;
		+NoSector;
		//+NoInteraction;
		+NoClip;
		-Solid;
		+ClientSideOnly;

		alpha 0.0;
	}

	Override void PostBeginPlay()
	{
		if(!Args[0])
		{
			radius = 256;
		}
		else
		{
			radius = Args[0];
		}
		if(!Args[1])
		{
			iterationNumber = 25;
		}
		else
		{
			iterationNumber = Args[1];
		}
		Super.PostBeginPlay();
	}

	void GenerateHazeIndoor()
	{
		for (int i = 0; i < iterationNumber; i++)
		{
			A_SpawnItemEx("BIF_haze_indoor", Random(-radius, radius), Random(-radius, radius), Random(-8, Args[2]) );
		}
	}

	States
	{
	  Spawn:
		HZMR A 1;
		GOTO Active;
	  Active:
		TNT1 A 1
		{
			if(!Args[3])
			{
			GenerateHazeIndoor();
			}
		}
		TNT1 A -1;
		Stop;
	}
}




Class FireFlame : Actor
{
	int RollSpeed;
	float ThisScale;
	float ScaleDecrease;
	float FadeoutSpeed;
	Default
	{
		Scale 0.25;
		+NoInteraction;
		+Rollsprite
		+FORCEXYBILLBOARD
		-SOLID;
		RenderStyle "Add";
		//DistanceCheck "user_MaxDrawDistanceTorchFire";
	}
	Override void PostBeginPlay()
	{
		FadeoutSpeed = 0.1;
		ScaleDecrease = 0.03;
		ThisScale = 0.25;

		RollSpeed = Random(-30, 30);
		A_SetRoll(random(0, 360));
		Super.PostBeginPlay();
	}
	virtual void ParticleLife()
	{
		ThisScale = ThisScale-ScaleDecrease;
		if(ThisScale<0){ThisScale=0;}
		A_SetScale(ThisScale);
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		A_fadeOut(FadeoutSpeed);
	}
	States
	{

		Spawn:
			FL1M A 2 {ParticleLife();}
			LOOP;

	}
}


Class FireFlameGreat : Actor
{

int RollSpeed;
	float ThisScale;
	float ScaleDecrease;
	float FadeoutSpeed;
	Default
	{
		Scale 1.0;
		+NoInteraction;
		+Rollsprite
		+FORCEXYBILLBOARD
		-SOLID;
		RenderStyle "Add";
		//DistanceCheck "user_MaxDrawDistanceTorchFire";
	}
	Override void PostBeginPlay()
	{
		FadeoutSpeed = 0.1;
		ScaleDecrease = 0.1;
		ThisScale = 3.0;

		RollSpeed = Random(-30, 30);
		A_SetRoll(random(0, 360));
		Super.PostBeginPlay();
	}
	virtual void ParticleLife()
	{
		ThisScale = ThisScale-ScaleDecrease;
		if(ThisScale<0){ThisScale=0;}
		A_SetScale(ThisScale);
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		A_fadeOut(FadeoutSpeed);
	}
	States
	{

		Spawn:
			FL1M A 2 {ParticleLife();}
			LOOP;

	}
}
Class FireFlameGreatGreen : FireFlameGreat
{
	States
	{

		Spawn:
			FL2M A 2 {ParticleLife();}
			LOOP;

	}
}

Class FireFlameGreen : FireFlame
{
	States
	{

		Spawn:
			FL2M A 2 {ParticleLife();}
			LOOP;

	}
}
Class FireFlameBlue : FireFlame
{
	States
	{

		Spawn:
			FL3M A 2 {ParticleLife();}
			LOOP;

	}
}



Class FireFlameSpawnerGREAT : Actor
{
	int r;
	int minYvel;
	int maxYvel;
	Default
	{
		radius 64;
		+NoGravity;
		//+NoInteraction;
	}
	Override void PostBeginPlay()
	{
		r = !Args[0] ? 48 : Args[0];
		minYvel =  !Args[1] ? 10 : Args[1];
		maxYvel =  !Args[2] ? 34 : Args[2];
		Super.PostBeginPlay();
	}
	States
	{
		Spawn:
			//TNT1 A 0 A_CheckSight("Inv");
			TNT1 A 1
			{
				A_Playsound("world/BigFire", 1, 0.3, 1);
				A_SpawnItemEx("FireFlameGreat", Random(-r, r), Random(-r, r), Random(0, 24), 0, 0, Frandom(minYvel, maxYvel), 0, SXF_NOCHECKPOSITION, 32, 0);
			}
		LOOP;
		Inv:
			TNT1 A 1;
			Goto Spawn;

	}
}
Class FireFlameSpawnerGREATgreen : Actor
{
	int r;

	Default
	{
		radius 64;
		//+NoInteraction;
		+NoGravity;
	}
	Override void PostBeginPlay()
	{
		r = 48;
		Super.PostBeginPlay();
	}
	States
	{
		Spawn:
			//TNT1 A 0 A_CheckSight("Inv");
			TNT1 A 1
			{
				A_Playsound("Ambient/DSCtorch2", 1, 0.5, 1);
				A_SpawnItemEx("FireFlameGreatGreen", Random(-r, r), Random(-r, r), Random(0, 24), 0, 0, Frandom(10, 34), 0, SXF_NOCHECKPOSITION, 32, 0);
			}
		LOOP;
		Inv:
			TNT1 A 1;
			Goto Spawn;

	}
}


Class FireFlameSpawnerTorch : Actor
{

	int r;

	Default
	{
		radius 8;
		//+NoInteraction;
		+Nogravity;
	}
	Override void PostBeginPlay()
	{
		r = 2;
		Super.PostBeginPlay();
	}
	States
	{
		Spawn:
			TNT1 A 0 A_CheckSight("Inv");
			TNT1 A 1
			{
				A_Playsound("Ambient/DSCtorch2", 1, 1, 1);
				A_SpawnItemEx("FireFlame", Random(-r, r), Random(-r, r), Random(0, 4), 0, 0, Frandom(1, 2), 0, SXF_NOCHECKPOSITION, 32, 0);
			}
		LOOP;
		Inv:
			TNT1 A 1;
			Goto Spawn;

	}
}

Class FireFlameSpawnerTorchRed : FireFlameSpawnerTorch
{
	States
	{
		Spawn:
			TNT1 A 0 A_CheckSight("Inv");
			TNT1 A 1
			{
				A_Playsound("Ambient/DSCtorch2", 1, 1, 1);
				A_SpawnItemEx("FireFlame", Random(-r, r), Random(-r, r), Random(0, 4), 0, 0, Frandom(1, 2), 0, SXF_NOCHECKPOSITION, 32, 0);
			}
		LOOP;
		Inv:
			TNT1 A 1;
			Goto Spawn;
	}
}
Class FireFlameSpawnerTorchGreen : FireFlameSpawnerTorch
{
	States
	{
		Spawn:
			TNT1 A 0 A_CheckSight("Inv");
			TNT1 A 1
			{
				A_Playsound("Ambient/DSCtorch2", 1, 1, 1);
				A_SpawnItemEx("FireFlameGreen", Random(-r, r), Random(-r, r), Random(0, 4), 0, 0, Frandom(1, 2), 0, SXF_NOCHECKPOSITION, 32, 0);
			}
		LOOP;
		Inv:
			TNT1 A 1;
			Goto Spawn;
	}
}
Class FireFlameSpawnerTorchBlue : FireFlameSpawnerTorch
{
	States
	{
		Spawn:
			TNT1 A 0 A_CheckSight("Inv");
			TNT1 A 1
			{
				A_Playsound("Ambient/DSCtorch2", 1, 1, 1);
				A_SpawnItemEx("FireFlameBlue", Random(-r, r), Random(-r, r), Random(0, 4), 0, 0, Frandom(1, 2), 0, SXF_NOCHECKPOSITION, 32, 0);
			}
		LOOP;
		Inv:
			TNT1 A 1;
			Goto Spawn;
	}
}
Class BigDoomTorch  : Actor
{
	Default
	{
		+SOLID;
		Radius 8;
		Height 64;
		Scale 0.12;
		+Nogravity;
		//FlareBaseClass.DrawFlare true;
		//FlareBaseClass.FlareGraphics "HALO1";
		//FlareBaseClass.FlareZoffset 64;
		//RenderStyle "Add";
	}
	States
	{
		Spawn:
			BFT1 A 1 NODELAY
			{
				A_SpawnItemEx("FireFlameSpawnerTorch", 0, 0, 52, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0);
				A_SpawnItemEx("DoomTorchHalo", 0, 0, 64, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0);
			}
			GOTO ACTIVE;
		Active:
			BFT1 A -1;
			STOP;
	}
}

Class BigDoomTorchGreen : BigDoomTorch
{
	States
	{
		Spawn:
			BFT1 A 1 NODELAY
			{
				A_SpawnItemEx("FireFlameSpawnerTorchGreen", 0, 0, 52, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0);
				A_SpawnItemEx("DoomTorchHalo", 0, 0, 64, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0);
			}
			 Goto Super::ACTIVE;
	}
}
Class BigDoomTorchRed : BigDoomTorch
{
	States
	{
		Spawn:
			BFT1 A 1 NODELAY
			{
				A_SpawnItemEx("FireFlameSpawnerTorchRed", 0, 0, 52, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0);
				A_SpawnItemEx("DoomTorchHalo", 0, 0, 64, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0);
			}
			 Goto Super::ACTIVE;
	}
}
Class BigDoomTorchBlue : BigDoomTorch
{
	States
	{
		Spawn:
			BFT1 A 1 NODELAY
			{
				A_SpawnItemEx("FireFlameSpawnerTorchBlue", 0, 0, 52, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0);
				A_SpawnItemEx("DoomTorchHalo", 0, 0, 64, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0);
			}
			 Goto Super::ACTIVE;
	}
}

Class DoomTorchHalo  : Actor
{

	Default
	{
		Scale 0.35;
		//+NoInteraction;
		+NoGravity;
		RenderStyle "Add";
	}
	States
	{
		Spawn:
			HAL1 A 3
			{
				A_FadeTo(frandom(0.1, 0.3), 0.1);
			}
			LOOP;
	}
}

Class Bif_spawned_stone : Actor {
	Default
	{
		+FORCEXYBILLBOARD;
		Scale 0.5;
		//DistanceCheck "user_MaxDrawDistanceStones";
	}
	States
	{
		Spawn:
		"####" "#"  1 NODELAY A_SetScale(frandom(0.25, 0.75));
		//"####" "##########" 2 A_FadeTo(1.0, 0.1)
		"####" "#" -1;
		Stop;
	}
}


Class DSCrandomGrass : Actor //22015
{
	static const string floorTex[] = {
		"BLOOD1", "BLOOD2", "MARS_GR2", "SEMIGR"
	};

	bool bSloped;

	Default
	{
		+FORCEXYBILLBOARD;
		//+NOINTERACTION;
		+NOBLOCKMAP;
		+GHOST;
		Radius 16;
		Scale 0.2;
	}

	override void Tick()
	{
		if(!bSloped)
		{
			AlignToSlope(self,self.angle,0.0f);
			bSloped = true;
		}
		Super.Tick();
	}

	Override void PostBeginPlay()
	{
		A_SetScale(frandom(0.05, 0.12));
		Super.PostBeginPlay();
	}

	bool CheckFloorTexture()
	{
		int fTexLenght = floorTex.Size();

		for (int i = 0; i < fTexLenght;i++)
		{
			TextureID tx=TexMan.CheckForTexture(floorTex[i],TexMan.Type_Flat);
			if (tx == floorpic)
			{
				return true;
			}
		}
		return false;
	}

    static void AlignToSlope(Actor self, double dAng, double dPitch)
    {
        vector3 fNormal = self.CurSector.FloorPlane.Normal;
        vector2 fNormalP1 = (fNormal.X != 0 || fNormal.Y != 0) ? (fNormal.X, fNormal.Y).Unit() : (0, 0);
        vector2 fNormalP2 = ((fNormal.X, fNormal.Y).Length(), fNormal.Z);
        double fAng = atan2(fNormalP1.Y, fNormalP1.X);
        double fPitch = -atan2(fNormalP2.X, fNormalP2.Y);
        double dDiff1 = sin(fAng - (dAng + dPitch));
        double dDiff2 = cos(fAng - dAng);
        self.Pitch = fPitch * dDiff2 + dPitch;
        self.Roll = fPitch * dDiff1;
        self.Angle = dAng;
    }

	States
	{
		Spawn:
			BDG1 A 0 nodelay
			{
				if(!CheckFloorTexture() )
				{
					return ResolveState("Null");
				}
				else
				{
					return ResolveState(Null);
				}
			}
			BDG1 A 1  A_Jump (256, "tre1", "tre2", "tre3", "tre4") ;
			loop;
		tre1:
			BDG1 A -1;
			stop;
		tre2:
			BDG2 A -1;
			stop;
		tre3:
			BDG3 A -1;
			stop;
		tre4:
			BDG4 A -1;
			stop;
	}
}


Class DSCcandleLight : Actor
{

	Default
	{
		+NOINTERACTION
		Renderstyle "Add";
		Scale 0.05;
	}


	States
	{
	Spawn:
		CLGH ABC 2 light("DSCcandleLight")
		{
			if ( Random(1,101) > 50)
			{
				frame = random(0,2);
			}
		}
	Loop;

	Inactive:
		TNT1 A 1;
		Loop;
	}
}

Class DSCbloodRainDrop : Actor
{
	/*static const string floorTex[] = {
		"F_SKY1"
	};


	Default
	{

	}

	override void Tick()
	{
		Super.Tick();
	}


	bool CheckFloorTexture()
	{
		int fTexLenght = floorTex.Size();

		for (int i = 0; i < fTexLenght;i++)
		{
			TextureID tx=TexMan.CheckForTexture(floorTex[i],TexMan.Type_Flat);
			if (tx == floorpic)
			{
				return true;
			}
		}
		return false;
	}
*/


	States
	{
		Spawn:
			BDG1 A 1;
			/*{
				if(!CheckFloorTexture() )
				{
					return ResolveState("Null");
				}
				else
				{
					return ResolveState(Null);
				}
			}*/
			loop;
	}
}



Class DSCexplosiveVAZA : Actor
{

	Default
	{
	  Health 20;
	  Radius 10;
	  Height 42;
	  +SOLID;
	  +SHOOTABLE;
	  +NOBLOOD;
	  +ACTIVATEMCROSS;
	  +DONTGIB;
	  +NOICEDEATH;
	  +OLDRADIUSDMG;
	// DeathSound "misc/VazaBreak";
	  Scale 0.25;
	}


	States
	{
	Spawn:
		VAZ1 A 1 ;
		Loop;

	  Death:
		VZX1 A 5 Bright Light("VazaBreak1");
		VZX1 B 5 Bright Light("VazaBreak2") A_Scream;
		VZX1 C 5 Bright Light("VazaBreak3")A_Explode(128, 192, true );
		TNT1 A 0 A_SpawnItemEx("DSCExplosion", 0, 0, 24, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, 0);
		TNT1 A 15 Light("VazaBreak3");
		TNT1 A 0 A_PlaySound("misc/VazaBreak");
		TNT1 A 5 Light("VazaBreak2");
		TNT1 A 5 Light("VazaBreak1");
		TNT1 A 2100;
		TNT1 A 0 A_Respawn(RSF_FOG|RSF_TELEFRAG);
		Wait;
	}
}
Class DSCExplosion : Actor
{
	Default
	{
		+FORCEXYBILLBOARD;
		+NOINTERACTION;
		Renderstyle "Add";
	}
	Action Void SpawnBurstSparkles(int count = 15)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("DSCExplosionSpark", Random(-16, 16), Random(-16, 16), Random(-16, 16), Random(-8, 8), Random(-8, 8), Random(0, 8), 0, SXF_NOCHECKPOSITION, 0, 0);
		}
	}
	Action Void SpawnBurstDscSmokeSpots(int count = 15)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("DscSmokeSpot", Random(-16, 16), Random(-16, 16), Random(-16, 16), fRandom(-2, 2), fRandom(-2, 2), fRandom(0, 2), 0, SXF_NOCHECKPOSITION, 0, 0);
		}
	}
	Action Void SpawnBurstDscDebris(int count = 9)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("DSCVazsDebris", Random(-16, 16), Random(-16, 16), Random(-16, 16), Random(-12, 12), Random(-12, 12), Random(2, 18), 0, SXF_NOCHECKPOSITION, 0, 0);
		}
	}

	States
	{
	Spawn:
		VZEX B 1 NODELAY SpawnBurstDscDebris();
		VZEX C 1 ;
		VZEX D 1 A_PlaySound("misc/DSCexplosion");
		VZEX E 1 SpawnBurstSparkles();
		VZEX F 1 ;
		VZEX G 1 SpawnBurstSparkles();
		VZEX H 1 ;
		VZEX I 1 SpawnBurstSparkles();
		VZEX J 1 SpawnBurstDscSmokeSpots();
		VZEX K 1;
		VZEX L 1;
		VZEX M 1 SpawnBurstDscSmokeSpots();
		VZEX N 1;
		VZEX O 1;
		VZEX P 1;
		VZEX Q 1;
		VZEX R 1;
		VZEX S 1;
		VZEX T 1;
		VZEX U 1;
		VZEX V 1 A_FadeOut(1.0);
		STOP;
	}

}
Class DSCExplosionSpark : Actor
{
	Default
	{
	Alpha 1.0;
	Scale 0.25;
	RenderStyle "Add";
	-NOGRAVITY;
	}
	States
	{
		Spawn:
			TNT1 A 1 A_Jump(256, "S1", "S2", "S3", "S4");
			Loop;
		S1:
			FRS1 A 1;
			GOTO Halt;
		S2:
			FRS2 A 1;
			GOTO Halt;
		S3:
			FRS3 A 1;
			GOTO Halt;
		S4:
			FRS4 A 1;
			GOTO Halt;
		Halt:
			"####" "A" 1 BRIGHT A_FadeOut(0.04);
			LOOP;
		Death:
			TNT1 A 1;
			stop;
	}
}
Class DscSmokeSpot : Actor
{
	int RollSpeed;
	float ThisScale;
	float ScaleINcrease;
	float FadeoutSpeed;
	Default
	{
		Scale 0.15;
		+NoInteraction;
		+Rollsprite
		+FORCEXYBILLBOARD
		Renderstyle "Translucent";
		//DistanceCheck "user_MaxDrawDistanceTorchFire";
	}
	Override void PostBeginPlay()
	{
		FadeoutSpeed = 0.03;
		ScaleINcrease = 0.03;
		ThisScale = 0.15;

		RollSpeed = Random(-30, 30);
		A_SetRoll(random(0, 360));
		Super.PostBeginPlay();
	}
	virtual void ParticleLife()
	{
		ThisScale = ThisScale+ScaleINcrease;
		//if(ThisScale<0){ThisScale=0;}
		A_SetScale(ThisScale);
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		A_fadeOut(FadeoutSpeed);
	}
	States
	{

		Spawn:
			S1MK A 2 {ParticleLife();}
			LOOP;

	}
}
Class DSCVazsDebris : Actor
{
	int RollSpeed;

	Default
	{
	Alpha 1.0;
	Scale 0.25;
	+FORCEXYBILLBOARD
	+Rollsprite
	Renderstyle "Translucent";
	-NOGRAVITY;
	}
	Override void PostBeginPlay()
	{
		RollSpeed = Random(-30, 30);
		Super.PostBeginPlay();
	}
	virtual void ParticleLife()
	{
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;

	}
	States
	{
		Spawn:
			TNT1 A 1 A_Jump(256, "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9");
			Loop;
		S1:
			VZEP A 1;
			GOTO Halt;
		S2:
			VZEP B 1;
			GOTO Halt;
		S3:
			VZEP C 1;
			GOTO Halt;
		S4:
			VZEP D 1;
			GOTO Halt;
		S5:
			VZEP E 1;
			GOTO Halt;
		S6:
			VZEP F 1;
			GOTO Halt;
		S7:
			VZEP J 1;
			GOTO Halt;
		S8:
			VZEP H 1;
			GOTO Halt;
		S9:
			VZEP K 1;
			GOTO Halt;

		Halt:
			"####" "#" 1
			{
				A_FadeOut(0.01);
				ParticleLife();
			}
			LOOP;
		Death:
			TNT1 A 1;
			stop;
	}
}


Class DSCbloodWave : Actor
{

	float Scale;
	float ScaleSpeed;

	Override void PostBeginPlay()
	{
		Scale = 0.05;
		ScaleSpeed = 0.01;
	}

	virtual void ParticleLife()
	{
		Scale = Scale+ScaleSpeed;
		A_SetScale(Scale);

	}
	Override void Tick()
	{
		ParticleLife();
		Super.Tick();
	}
	Default
	{
		Alpha 1.0;
		Scale 0.25;
		+NOINTERACTION;
		+FLATSPRITE;
		Renderstyle "Translucent";
	}

	States
	{
		Spawn:
		 BW1E A 5 A_fadeOut(0.33);
		 BW1E B 5;
		 BW1E C 5;
		Loop;
	}

}
Class DSCwindowGlow : Actor
{
	Default
	{
		+NOINTERACTION;
		+FORCEYBILLBOARD
		Renderstyle "Add";
	}
	States
	{
		Spawn:
		 LTSR A 1;
		Loop;
	}
}
Class DSCwindowGlowWhite : SwitchableDecoration
{
	Default
	{
		+NOINTERACTION;
		+FORCEYBILLBOARD
		Renderstyle "Add";
	}
	States
	{
		Spawn:
			LTSU A 1;
			Loop;
		Active:
			LTSU A 1;
			Loop;
		Inactive:
			TNT1 A 1;
			Loop;
	}
}

Class DSCceilLightRay  : SwitchableDecoration
{
	Default
	{
		+NOINTERACTION;
		+FORCEYBILLBOARD
		+SPAWNCEILING
		Height 0;
		Renderstyle "Add";
	}
	States
	{
		Spawn:
			LTS2 A 1;
			Loop;
		Active:
			LTS2 A 1 A_PlaySound("world/LAMPHUM", 7, 1.0, true);
			Loop;
		Inactive:
			TNT1 A 1;
			Loop;
	}
}
Class DSCceilFlatRay  : SwitchableDecoration
{
	Default
	{
		+NOINTERACTION;
		+FLATSPRITE
		Height 0;
		Scale 0.3;
		Renderstyle "Add";
	}
	States
	{
		Spawn:
			LTS2 B 1;
			Loop;
		Active:
			LTS2 B 1;
			Loop;
		Inactive:
			TNT1 A 1;
			Loop;
	}
}
Class DSCceilFlatRay2  : SwitchableDecoration
{
	Default
	{
		+NOINTERACTION;
		+FLATSPRITE;
		Height 0;
		Scale 0.3;
		Renderstyle "Add";
	}
	States
	{
		Spawn:
			LTS2 C 1;
			Loop;
		Active:
			LTS2 C 1;
			Loop;
		Inactive:
			TNT1 A 1;
			Loop;
	}
}
/*
Class DSCceilLightRay : Actor
{
Default
{
+NOINTERACTION;
//+FORCEYBILLBOARD
+FLATSPRITE
+SPAWNCEILING
Height 0;
Renderstyle "Add";
}
States
{
Spawn:
LTS2 A 0 Nodelay A_SetScale(1.0,-1.0);
Spawn2:
LTS2 A 1 A_PlaySound("world/LAMPHUM", 7, 1.0, true);
Loop;
}

}
*/
Class DSCceilLightGlow : Actor
{
	Default
	{
		+NOINTERACTION;
		+FORCEYBILLBOARD
		+SPAWNCEILING
		Renderstyle "Add";
		Scale 0.5;
	}
	States
	{
		Spawn:
		 LTS3 A 1;
		Loop;
	}
}
Class DSClavaSpark : Actor
{
	Default
	{
	Alpha 1.0;
	Scale 0.15;
	RenderStyle "Add";
	+NoInteraction;
	+FORCEXYBILLBOARD;

	}
	States
	{
		Spawn:
			TNT1 A 1 A_Jump(256, "S1", "S2", "S3", "S4");
			Loop;
		S1:
			FRS1 A 1;
			GOTO Halt;
		S2:
			FRS2 A 1;
			GOTO Halt;
		S3:
			FRS3 A 1;
			GOTO Halt;
		S4:
			FRS4 A 1;
			GOTO Halt;
		Halt:
			"####" "A" 1 BRIGHT
			{
				A_FadeOut(0.003);
			}
			LOOP;
		Death:
			TNT1 A 1;
			stop;
	}
}


Class DSClavaSparkGenSV : SwitchableDecoration
{
	float Radius;
	float Height;
	float MinSpeed;
	float Speed;
	int iterationNumber;

	Default
	{
		+NOINTERACTION;
		+LOOKALLAROUND;
		+AMBUSH;
		+QUICKTORETALIATE;
	}
	Override void PostBeginPlay()
	{
		Radius = Args[0]?Args[0]:256;
		iterationNumber = Args[1]?Args[1]:1;
		Height = 64;
		MinSpeed = 0.1;
		Speed = 0.5;
	}
	States
		{
			Spawn:
				TNT1 A 1;
					Goto Inactive;
			Inactive:
				TNT1 A 1;
					Loop;
			Active:
				TNT1 A 1
				{
					for (int i = 0; i < iterationNumber; i++){
						A_SpawnItemEx("DSClavaSpark", fRandom(-Radius, Radius), fRandom(-Radius, Radius), fRandom(0, Height), fRandom(-Speed, Speed), fRandom(-Speed, Speed), fRandom(MinSpeed, Speed*3), 0, SXF_CLIENTSIDE, 0, 0);
					}
				}
				Loop;
		}
}

Class DSClavaSparkGen : Actor
{
	float Radius;
	float Height;
	float MinSpeed;
	float Speed;
	Default
	{
		+NOINTERACTION;
		+LOOKALLAROUND;
		+AMBUSH;
		+QUICKTORETALIATE;
	}
	Override void PostBeginPlay()
	{
		Radius = Args[0]?Args[0]:256;
		Height = 64;
		MinSpeed = 0.1;
		Speed = 0.5;
	}
	States
		{
			Spawn:
				TNT1 A 1 A_LookEx(LOF_NOSOUNDCHECK);
			See:
				TNT1 A 1  A_JumpIfCloser(2048, "Spark", false);
				Goto Spawn;
			Spark:
				TNT1 A 1 A_SpawnItemEx("DSClavaSpark", fRandom(-Radius, Radius), fRandom(-Radius, Radius), fRandom(0, Height), fRandom(-Speed, Speed), fRandom(-Speed, Speed), fRandom(MinSpeed, Speed*3), 0, SXF_NOCHECKPOSITION, 0, 0);
				Goto Spawn;
		}
}
Class DSClavaSparkGenHorizontal : DSClavaSparkGen
{
	States
		{
			Spawn:
				TNT1 A 1 A_LookEx(LOF_NOSOUNDCHECK);
			See:
				TNT1 A 1  A_JumpIfCloser(2048, "Spark", false);
				Goto Spawn;
			Spark:
				TNT1 A 1 A_SpawnItemEx("DSClavaSpark", fRandom(-Radius, Radius), fRandom(-Radius, Radius), fRandom(0, Height), fRandom(MinSpeed, Speed*3), fRandom(-Speed, Speed), fRandom(-Speed, Speed), 0, SXF_NOCHECKPOSITION, 0, 0);
				Goto Spawn;
		}
}

Class DSCtentyacleDecor : Actor
{
	int delay;
	float MinSpeed;
	float MaxSpeed;
	float speed;
	int MinDelay;
	int MaxDelay;
	float MaxScale;
	float MinScale;
	Default
	{
		+NOGRAVITY;
		+NOINTERACTION;
		Renderstyle "Translucent";
		+FORCEYBILLBOARD;
		Alpha 1.0;
		//Xscale 0.5;
		//Yscale 0.5;
	}
	Override void PostBeginPlay()
	{
		MinScale = 0.1;
		MaxScale = 10;
		MinDelay = 35*5;
		MaxDelay = 35*20;
		MinSpeed = 0.01;
		MaxSpeed = 0.1;
	}

	States
	{
		Spawn:
			T1NT A 0 A_Jump (256, 1, 2, 3);
			T1NT A 1 A_Jump (256, "Live");
			T1NT B 1 A_Jump (256, "Live");
			T1NT C 1 A_Jump (256, "Live");
			LOOP;
		Live:
			"####" "#" 1
			{
				delay = random(MinDelay, MaxDelay);
				MaxScale = Frandom(1, 7);
				speed = Frandom(MinSpeed, MaxSpeed);
			}
			GOTO Stand;
			//GOTO Grow;
		Stand:
			"####" "#" 0 {
				delay--;
			}
			"####" "#" 1 A_JumpIf(delay<=0, "SwichState");
			Loop;
		SwichState:
			"####" "#" 1 A_Playsound("world/tentacle", CHAN_AUTO, 1.0, false, ATTN_NORM);
			"####" "#" 1 A_JumpIf(scale.Y>=MaxScale, "Shrink");
			GOTO Grow;
		Grow:
			"####" "#" 0 A_JumpIf(scale.Y>=MaxScale, "Live");
			//"####" "#" 1 A_PrintBold( "Next revenant killed..." );
			"####" "#" 1 {
				scale.Y+=speed;
				scale.X+=speed;

			}
			Loop;
		Shrink:

			"####" "#" 0 A_JumpIf(scale.Y <= MinScale, "Live");
			"####" "#" 1 {
				scale.Y-=speed;
				scale.X-=speed;
			}
			Loop;
	}
}

Class DSCdistantRock : Actor
{
	Default
	{
		+NOGRAVITY;
		+NOINTERACTION;
		+WALLSPRITE;
		Renderstyle "Translucent";
		+FORCEYBILLBOARD;
	}
	States
	{
		Spawn:
			ROS1 A 1;
			LOOP;

	}
}



Class  DSCbloodRain: SwitchableDecoration
	{
	Default
	{
		radius 64;
		//+NoInteraction;
		+NoGravity;
		+NoInteraction;
		Alpha 0.0;

	}
	States
		{
			Spawn:
				TNT1 A 1;
				GOTO Inactive;
			Inactive:
				TNT1 A 1;
				Loop;

			Active:
				TNT1 A 1 A_SpawnItemEx("BloodRainDrop", Random(-Args[0], Args[0]), Random(-Args[0], Args[0]), -2, 0, 0, -10, 0, 0, Args[1]);
				Loop;
		}
	}

Class DSCunderBloodGEN : Actor{
	int user_radius;

	Default
	{
		//+NoInteraction;
		+NoGravity;
	}
	Override void PostBeginPlay()
	{
		user_radius = args[0]?args[0]:256;
	}
	States

	{
	Spawn:
		TNT1 A 1 NODELAY;
		Goto Generate;

	Generate:
		"####" "#" 1
		{

				for (int i = 0; i < 6; i++){
					A_SpawnItemEx("DSCunderbloodItem1", random(-user_radius,user_radius), random(-user_radius,user_radius), random(0,0), 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
					A_SpawnItemEx("DSCunderbloodItem2", random(-user_radius,user_radius), random(-user_radius,user_radius), random(0,0), 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
					A_SpawnItemEx("DSCunderbloodItem3", random(-user_radius,user_radius), random(-user_radius,user_radius), random(0,0), 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
					A_SpawnItemEx("DSCunderbloodItem4", random(-user_radius,user_radius), random(-user_radius,user_radius), random(0,0), 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
					A_SpawnItemEx("DSCunderbloodItem5", random(-user_radius,user_radius), random(-user_radius,user_radius), random(0,0), 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
					A_SpawnItemEx("DSCunderbloodItem6", random(-user_radius,user_radius), random(-user_radius,user_radius), random(0,0), 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
					A_SpawnItemEx("DSCunderbloodItem7", random(-user_radius,user_radius), random(-user_radius,user_radius), random(0,0), 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
					A_SpawnItemEx("DSCunderbloodItem8", random(-user_radius,user_radius), random(-user_radius,user_radius), random(0,0), 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
				}
		}
		"####" "#" -1;
		Stop;

	}
}

Class DSCunderbloodItem1 : DSCunderbloodItem
{
	States
	{
	Spawn:
		UDB1 A 0;
		Goto Super::Spawn;
	}

}
Class DSCunderbloodItem2 : DSCunderbloodItem
{
	States
	{
	Spawn:
		UDB2 A 0;
		Goto Super::Spawn;
	}

}
Class DSCunderbloodItem3 : DSCunderbloodItem
{
	States
	{
	Spawn:
		UDB3 A 0;
		Goto Super::Spawn;
	}

}

Class DSCunderbloodItem4 : DSCunderbloodItem
{
	States
	{
	Spawn:
		UDB4 A 0;
		Goto Super::Spawn;
	}

}
Class DSCunderbloodItem5 : DSCunderbloodItem
{
	States
	{
	Spawn:
		UDB5 A 0;
		Goto Super::Spawn;
	}

}
Class DSCunderbloodItem6 : DSCunderbloodItem
{
	States
	{
	Spawn:
		UDB6 A 0;
		Goto Super::Spawn;
	}

}
Class DSCunderbloodItem7 : DSCunderbloodItem
{
	States
	{
	Spawn:
		UDB7 A 0;
		Goto Super::Spawn;
	}

}
Class DSCunderbloodItem8 : DSCunderbloodItem
{
	States
	{
	Spawn:
		UDB8 A 0;
		Goto Super::Spawn;
	}

}
Class DSCunderbloodItem : Actor {
	Default
	{
		+FORCEYBILLBOARD;
		Scale 0.5;
	}
	States
	{
		Spawn:
		"####" "#"  1 NODELAY A_SetScale(frandom(0.15, 0.25));
		"####" "#" -1;
		Stop;
	}
}




class DSCvororosl1 : Actor
{
	Default
	{
		+NOGRAVITY;
		+WALLSPRITE;
		Scale 0.5;
	}
	States
	{
		Spawn:
		VDR1 A  1;
		"####" "#" -1;
		Stop;
	}
}

Class DSCmoaner1 : Actor
{
	int delay;

	Default
	{
		+NOGRAVITY;
		+NOINTERACTION;
	}
	States
	{
		Spawn:
			TNT1 A 1 NODELAY {
				A_Playsound("DSCmoaner", CHAN_AUTO, 1.0, false, ATTN_NORM);
				delay = 35*3+random(15, 35*2);
			}
			GOTO Delay;
		Delay:
			"####" "#" 1
			{
				delay--;
				if(!delay){	SetStateLabel("Spawn"); }
			}
			Loop;

	}
}


Class DSCwinterTree : Actor
{
	Default
	{
	+FORCEYBILLBOARD;
	RADIUS 16;
	Height 128;
	+SOLID
	}
	States
	{
		Spawn:

			BTR1 A 0 nodelay
			{
				A_SetScale(frandom(0.3, 0.7));
			}
			WTR0 A 1  A_Jump (256, "tre1", "tre2", "tre3", "tre4", "tre5");
			loop;
		tre1:
			WTR0 A -1;
			stop;
		tre2:
			WTR1 A -1;
			stop;
		tre3:
			WTR2 A -1;
			stop;
		tre4:
			WTR3 A -1;
			stop;
		tre5:
			WTR4 A -1;
			stop;
	}
}

class AngloRotator : SwitchableDecoration
{
	Default
	{
		//$Arg0 "pitch amplitude"
		//$Arg0ToolTip "pitch range from 0 - 360."
		//$Arg0Default 25
		//$Arg1 "pitch speed"
		//$Arg1Default 2
		//$Arg2 "angle amplitude"
		//$Arg2ToolTip "angle range from 0 - 360. if angle is 360 = Strobe"
		//$Arg2Default 25
		//$Arg3 "angle speed"
		//$Arg3Default 2
		//$Arg4 "mode"
		//$Arg4ToolTip "0 = pitch + angle; 1 = only pitch; 2 = only angle"
		//$Arg4Default 0
	}

	Array<Actor> actors;
	bool activated;
	double minRangePitch;
	double maxRangePitch;
	double minRangeAngle;
	double maxRangeAngle;

	double initPitch;
	double initAngle;
	double pitchAmlitude;
	double pitchSpeed;
	double angleAmlitude;
	double angleSpeed;
	uint8 mode;

	bool goBackPitch;
	bool goBackAngle;
	bool alwaysAngle;

	override void PostBeginPlay()
	{
		bool finded = FindActors();
		if(!finded) self.Destroy();
		initPitch = self.pitch;
		initAngle = self.angle;
		pitchAmlitude = clamp(args[0] ? args[0] : 25,0,360);
		pitchSpeed = args[1] ? args[1] : 2;
		angleAmlitude = clamp(args[2] ? args[2] : 25,0,360);
		angleSpeed = args[3] ? args[3] : 2;
		mode = clamp(args[4] ? args[4] : 0,0,2);

		if(angleAmlitude == 360) alwaysAngle = true;

		maxRangePitch = self.pitch + pitchAmlitude;
		minRangePitch = self.pitch - pitchAmlitude;
		maxRangeAngle = self.angle + angleAmlitude;
		minRangeAngle = self.angle - angleAmlitude;


		Super.PostBeginPlay();
	}

	override void Tick()
	{
		Super.Tick();
		if(self.activated)
		{
			if(self.pitch > self.maxRangePitch) self.goBackPitch = true;
			else if(self.pitch < self.minRangePitch) self.goBackPitch = false;

			if(!self.alwaysAngle)
			{
				if(self.angle > self.maxRangeAngle) self.goBackAngle = true;
				else if(self.angle < self.minRangeAngle) self.goBackAngle = false;
			}

			double makePitch = clamp(cos(abs(self.pitch-self.initPitch)*(self.initPitch/self.pitchAmlitude)),0.1,1.0);
			double makeAngle = clamp(sin(abs(self.angle-self.initAngle)*(self.initAngle/self.angleAmlitude)),0.1,1.0);

			switch(self.mode)
			{
				case 0:
				case 1:
					if(self.goBackPitch) self.pitch -= makePitch * self.pitchSpeed;
					else self.pitch += makePitch * self.pitchSpeed;
					break;
			}

			switch(self.mode)
			{
				case 0:
				case 2:
					if(self.alwaysAngle) self.angle += self.angleSpeed;
					else if(self.goBackAngle) self.angle -= makeAngle * self.angleSpeed;
					else self.angle += makeAngle * self.angleSpeed;
					break;
			}

			for(int i = 0; i < actors.Size(); ++i)
			{
				if(actors[i])
				{
					actors[i].angle = self.angle;
					actors[i].pitch = self.pitch;
				}
			}

		}
	}

	override void Activate (Actor activator)
	{
		activated = true;
		Super.Activate(activator);
	}

	override void Deactivate (Actor activator)
	{
		activated = false;
		Super.Deactivate(activator);
	}

	bool FindActors()
	{
		ThinkerIterator ti = ThinkerIterator.Create("Actor");
		Actor mo;
		while (mo = Actor(ti.Next()))
		{
			if (mo is "PlayerPawn" || mo == self) continue;
			if (mo.TID == tid)
			{
				actors.Push(mo);
				mo.SetOrigin(self.pos, false);
				mo.angle = self.angle;
				mo.pitch = self.pitch;
			}
		}
		if(actors.Size() > 0) return true;
		Console.Printf("\cRWarning\cC: No Actors Founded");
		return false;
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Goto Inactive;
		Inactive:
			TNT1 A -1;
			Stop;
		Active:
			TNT1 A 1;
			Goto Inactive;
	}
}
