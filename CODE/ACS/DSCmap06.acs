//episode wave count definition
int maxWaveCount = 40;//--------------------------
//episode wave count definition
#include "F:\Games\gzdoom\mywads\DSC\DSC.git\DSC\CODE\ACS\DSCcommon.acs"
#include "F:\Games\gzdoom\mywads\DSC\DSC.git\DSC\CODE\ACS\DSCwaves.acs"
#include "F:\Games\gzdoom\mywads\DSC\DSC.git\DSC\CODE\ACS\DSCranks.acs"

bool DeadPoolHelped;
bool FirstWaveDone = false;
bool YardDoorOpen = false;
bool Door8Locked = true;
bool Door9Locked = true;
bool Door10Locked = true;

script "StartControl" ENTER
{

Thing_Deactivate(100);
//TEST!
//CurrentWave = 40;
//NOspawn = true;
/*DSCplayerRank = 7;
CurrentWave = 100;
AmmoMaxRnd = 3;
WeaponGotID = 5;
*/

SpawnSpotFacingForced("DSCportalToMap", 206, 207);
SetThingSpecial(207, ACS_NamedExecute, "GotoHungar");



bool inDEV = false;
//TEST!
if(inDEV){
	GiveInventory("map07done", 1);
	GiveInventory("map08done", 1);
	GiveInventory("map09done", 1);
	//GiveInventory("map10done", 1);
}


	Thing_Activate(400);
	if(CheckInventory("map07done")>0){
		maxWaveCount = 75;
		Thing_Activate(402);
		Door9Locked = false;
		//activation of atrium vaves & normalize and normalize way to first map
		//Door10Locked = false;
		//Thing_Activate(107);
		ACS_NamedExecuteAlways("SpawnWave", 0, 100505, 888888, 888888); //notag nocount

	}

	if(CheckInventory("map08done")>0){
		Door8Locked = false;
		Thing_Activate(401);
	}
	if(CheckInventory("map09done")>0){

		if(CheckInventory("map10cunsceneShown")==0){
			//cutscene here
			//GiveInventory("map10done", 1);
			GiveInventory("map10cunsceneShown", 1);
			ACS_NamedExecuteAlways("LookAt", 0, 500, 35*15);
			SpawnSpotFacingForced("DSCportalToMap", 5, 100302);
			SetThingSpecial(100302, ACS_NamedExecute, "GotoDieHard");
			delay(35*7);
			ACS_NamedExecute("Door10", 0);
		}
		if(CheckInventory("map10cunsceneShown")>0){
			ACS_NamedExecute("Door10", 0);
		}

	}
	if(CheckInventory("map10done")>0){
		Thing_Activate(403);
		Door10Locked = false;
	}
	if(Atrium1Active){

	}
//


}





script "ActivadeDeadPoolHelper"(void){
	if(CheckInventory("map07done")==0){
		if(!DeadPoolHelped){
			DeadPoolHelped = true;
			Thing_Activate(201);
			SpawnSpotFacingForced("DSCportalToMap", 202, 203);
			SetThingSpecial(203, ACS_NamedExecute, "GotoDeadPool_clearinventory");
		}
	} else {
		if(!DeadPoolHelped){
			DeadPoolHelped = true;
			SpawnSpotFacingForced("DSCportalToMap", 202, 203);
			SetThingSpecial(203, ACS_NamedExecute, "GotoDeadPool");
			Floor_RaiseByValue(44, 8, 230);
			Thing_Activate(204);
		}
	}
}


Script "SatartFirstWave" (void){

	if(CheckInventory("map06done")==0){

		ACS_NamedExecuteAlways("Mus_M2", 0);
		ACS_NamedExecuteAlways("SpawnWave", 0, 100500, 999999, 100400);
		Delay(5);
		while(WaveOnline){ Delay(5);}
		ACS_NamedExecuteAlways("Mus_M2", 0);
		ACS_NamedExecuteAlways("SpawnWave", 0, 100501, 999999, 100400);
		Delay(5);
		while(WaveOnline){ Delay(5);}
		ACS_NamedExecuteAlways("Mus_M3", 0);
		ACS_NamedExecuteAlways("SpawnWave", 0, 100502, 100300, 100400);
		while(!NextWaveReady){
			delay(1);
		}
		NextWaveReady = false;
		ACS_NamedExecuteAlways("Mus_G1", 0);
		ACS_NamedExecuteAlways("SpawnWave", 0, 100503, 100300, 100400);
		delay(35*20);
		ACS_NamedExecuteAlways("SpawnWave", 0, 100500, 888888, 888888);
		while(!NextWaveReady){
			delay(1);
		}
		NextWaveReady = false;
		ACS_NamedExecuteAlways("Mus_G2", 0);
		ACS_NamedExecuteAlways("SpawnWave", 0, 100501, 100300, 100400);
		delay(35*20);
		ACS_NamedExecuteAlways("SpawnWave", 0, 100502, 888888, 888888);
		while(!NextWaveReady){
			delay(1);
		}
		NextWaveReady = false;
		ACS_NamedExecuteAlways("Mus_G3", 0);
		ACS_NamedExecuteAlways("SpawnWave", 0, 100504, 100300, 100400);
		delay(35*20);
		ACS_NamedExecuteAlways("SpawnWave", 0, 100500, 888888, 888888);

		while(!NextWaveReady){
			delay(1);
		}
		NextWaveReady = false;
		delay(35*5);
		TotalKills = TotalKills + GetLevelInfo (LEVELINFO_KILLED_MONSTERS);
		Thing_Activate(300);
		ChangeCamera(300, 0, 0);

		for(int i = 0; i<=9; i++){	SoundVolume (0, i, 0.0); }
		PlaySound (0, "world/HAPPEN1" , 64, 1.0, false, ATTN_NONE);

		delay(5*35);
		Thing_DeActivate(300);
		ChangeCamera(0, 0, 0);

		for(i = 0; i<=9; i++){	SoundVolume (0, i, 1.0); }

		GiveInventory("map06done", 1);
		FirstWaveDone = true;
		/*ACS_NamedExecuteAlways("Mus_TITLEMAP", 0);
		Thing_Activate(200);
		ChangeCamera(200, 0, 0);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);*/
		//TODO: open gates to yard
	} else {
			SpawnSpotFacingForced("DSCportalToMap", 100300, 100301);
			SetThingSpecial(100301, ACS_NamedExecute, "GotoAtrium1");
			Thing_Activate(205);
	}
	//
}

script "YardDoorOpen" (void){
	if(!YardDoorOpen){
		YardDoorOpen = true;
		if(CheckInventory("map06done")>0 && FirstWaveDone!=true){
			ACS_NamedExecuteAlways("RotateDoorLeftNoReturn", 0, 1, 8, 64);
		}
	}
}

/*
script "openDoorToYard" (void){
	if(CheckInventory("map06done")>0){
		ACS_NamedExecuteAlways("RotateDoorLeftNoReturn", 0, 1, 8, 64);
	}
}
*/


script "DrawHelp" (int HelpID, int Time, int NextHelpTag){

	if (Time==0){Time=3;}

	switch (HelpID) {
		case 1:
			hudmessageBold(s:"Dive into the blood pool."; HUDMSG_PLAIN, 0, CR_RED, 1.5, 0.6, Time*1.1);
			break;
		case 2:
			hudmessageBold(s:"Now you can play\n\"The bloody tide\"\nWithout reset of inventory."; HUDMSG_PLAIN, 0, CR_RED, 1.5, 0.6, Time*1.1);
			break;
		case 3:
			hudmessageBold(s:"Now you can travel\n\through played episodes."; HUDMSG_PLAIN, 0, CR_RED, 1.5, 0.6, Time*1.1);
			break;
		case 4:
			hudmessageBold(s:"To Crimson depths"; HUDMSG_PLAIN, 0, CR_RED, 1.5, 0.6, Time*1.1);
			break;
		case 5:
			hudmessageBold(s:"To Hungar"; HUDMSG_PLAIN, 0, CR_RED, 1.5, 0.6, Time*1.1);
			break;
		case 6:
			hudmessageBold(s:"To Season of Winter"; HUDMSG_PLAIN, 0, CR_RED, 1.5, 0.6, Time*1.1);
			break;
		case 7:
			hudmessageBold(s:"To Die Hard"; HUDMSG_PLAIN, 0, CR_RED, 1.5, 0.6, Time*1.1);
			break;
		default:
			PrintBold(s:"Be strong!");

	}
	Delay((Time+2)*35);
	if(NextHelpTag>0){
		Thing_Activate(NextHelpTag);
	}
}

script "GotoDeadPool_clearinventory" (void){
	delay(15);
			CurrentWave = 0;
			AmmoMaxRnd = 0;
			WeaponGotID = 0;
	ChangeLevel ("DSCMAP07", 0, CHANGELEVEL_NOINTERMISSION|CHANGELEVEL_RESETHEALTH|CHANGELEVEL_RESETINVENTORY, -1);
	//deadpool enter script mus give to player all previous map#done items
}
script "GotoAtrium1" (void){
	delay(15);
	ChangeLevel ("DSCMAP01", 0, CHANGELEVEL_NOINTERMISSION, -1);
}
script "GotoDeadPool" (void){
	delay(15);
	ChangeLevel ("DSCMAP07", 0, CHANGELEVEL_NOINTERMISSION, -1);
}

script "GotoHungar" (void){
	delay(15);
	ChangeLevel ("DSCMAP08", 0, CHANGELEVEL_NOINTERMISSION, -1);
}
script "GotoWinter" (void){
	delay(15);
	ChangeLevel ("DSCMAP09", 0, CHANGELEVEL_NOINTERMISSION, -1);
}
script "GotoDieHard" (void){
	delay(15);
	ChangeLevel ("DSCMAP10", 0, CHANGELEVEL_NOINTERMISSION, -1);
}

SCRIPT "Door8" (void){
	if(!Door8Locked){
		Generic_Door(401, 16, 0, 34, 0);
	}
}
SCRIPT "Door9" (void){
	if(!Door9Locked){
		Generic_Door(402, 16, 0, 34, 0);
	}
}
SCRIPT "Door10" (void){
	Ceiling_LowerByValue(8, 16, 124);
	floor_Lowerbyvalue(8, 16, 124);

}




str CovenantTitle = "Unholy Cathedral";
str CovenantText = "Great Cathedral of Dark Lords was raised during the First Age of Ascension when the Undrax\nlake burst it’s banks and the first Titan awoke from his slumber. From those depths of \nunrecorded times our shrine aspires on the top of the Moul’Chris mountai glorifying names\nfrom the list of those who was chosen by our Great Master. Every gifted demon must pass his\nlong time service to the Cathedral if he is destined to become priest, prophet, preacher, \nspirit leader or a battle caster in our dark warrior host.\n\nMost mortals who went to pilgrimage through the Hell on their own and yet were not slayed by\ndemons have to climb the top of the mountain and kneel before the gates of Great Cathedral. \nAfterwards high priest will open the gates to meet those most fortitudinous from the miserables.\nBlessing them and giving them the brand of the turned. Neophyte flock spreads among their personal\nalcoves and joins to the canticle accompanying demons with the reading names of Dark Lords in right\norder to empower them.\n\nSome mortals are dying after the reading of first two commandments of the Darkness when Titan’s\nwhispering fills their mind and their flesh begin to burn. But most of those fortitudinous and\nfanatical, full of faith, who read every commandment and still being alive, may stay serving the\nCathedral as acolyte assisting to demon-priests and overseeing the flock. All others not worthy\nwill serve in rituals and sacrifices as well as food for praying demons.\n\nUnder the Cathedral there is a vasty ancient library that continues into the depths of the mountain.\nThis sacred place is guarded by the most fanatical of our priests who oversees every scroll on the\nshelves. Being unable to grasp it’s greatness lesser demons will burn their eyes of and cut both of\ntheir hands rather than approach this place.\n\nThe mightiest demon leaders only can get here and gaze into this abyss of the ages.\nHere in countless tomes, runes and oldest manuscripts was imprinted the whole our existance in the\nshadow of our Immortal Masters.";


str finalText = "";
int MsgID = 13131313;
int ttlID = 13131314;


script "Covenant" (void) {
	SetHudSize(800, 600, 0);
	SetFont ("BIGFONT");
	hudmessageBold(s:"Press any key to continue"; HUDMSG_PLAIN , 0, CR_RED, 400.0, 550.0, 0.1);
	HudMessage(s:CovenantTitle;HUDMSG_PLAIN,ttlID,CR_YELLOW, 400.0, 150.0, 0.1);
	SetFont ("SMALLFONT");
	HudMessage(s:CovenantText;HUDMSG_PLAIN,MsgID,CR_GRAY, 400.0, 320.0, 0.1);

}
