//////////////LIBRARY

global int 1:AmmoMaxRnd;
global int 2:WeaponGotID;
global int 3:CurrentWave;
global int 4:TotalKills;
global BOOL 5:Atrium1Active;
global int 6:MonsterCountMethod;

#define shotGunSpawnProgressInPercent 3
#define SSGSpawnProgressInPercent 15
#define ChaingunSpawnProgressInPercent 30
#define RLSpawnProgressInPercent 50
#define PlasmaGunSpawnProgressInPercent 70
#define BFG9000SpawnProgressInPercent 80

#define maxWaveCount 40
Bool NextWaveReady = false;
Bool WaveOnline = false;
Bool IgnoreWaveMusicChange = false;
int SpawnedMonstersOnTheMap = 0;
bool NOspawn = false; //dev staff

int SaintHealthUpMultipler = 0; //current health up for Zscript for DSCprisonedSaint
int SaintHealthUpBaseAmount = 10;//basic value for SaintHealthUp DSCprisonedSaint
//

int AchiveKillInSEc1 = 0;
int AchiveDieInSec1 = 0;
//int ArmorBonusToGive = 0;

int AchiveKillInSEc10 = 0;

SCRIPT "ResetCounters" ENTER {
	NextWaveReady = false;
	WaveOnline = false;
	IgnoreWaveMusicChange = false;
	SpawnedMonstersOnTheMap = 0;
	AchiveKillInSEc1 = 0;
	AchiveDieInSec1 = 0;

}
/*
SCRIPT "GiveArmorBonus" enter {
		if(ArmorBonusToGive>0){
			GiveInventory("DSCarmorBonus",ArmorBonusToGive);
			ArmorBonusToGive = 0;
		}
		delay(15);
	restart;
}*/
SCRIPT "AchiveKillInSEc10Counter" (void)
{
	delay(35*10);
	if(AchiveKillInSEc10>=20){

		PrintBold(s:"You are real DOOM SLAYER!\n", i:AchiveKillInSEc10, s:" kills in 10 sec!");
		AchiveKillInSEc10 = 0;
		terminate;
	}
	if(AchiveKillInSEc10>=7){

		PrintBold(s:"You are GREAT!\n", i:AchiveKillInSEc10, s:" kills in 10 sec!");
		AchiveKillInSEc10 = 0;
		terminate;
	}
	if(AchiveKillInSEc10>=5){

		PrintBold(s:"Good work!\n", i:AchiveKillInSEc10, s:" kills in 10 sec!");
		AchiveKillInSEc10 = 0;
		terminate;
	}


	AchiveKillInSEc10 = 0;

}

SCRIPT "AchiveKillInSEc1Counter" (void)
{
//GiveActorInventory(0, "DSCarmorBonus", 5);
	delay(35);
	//PrintBold(i:AchiveKillInSEc1);

	if(AchiveDieInSec1>=20 || AchiveKillInSEc1>=20){
		GiveActorInventory(0, "DSCarmorBonus", AchiveKillInSEc1);
		Log(s:"Real epic doomslayer tolal bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 6);
		SaintHealthUpMultipler+=AchiveKillInSEc1;
		terminate;
	}
	if(AchiveDieInSec1>=15){
		GiveActorInventory(0, "DSCarmorBonus", AchiveKillInSEc1);
		Log(s:"Tolal bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 5);
		SaintHealthUpMultipler+=AchiveKillInSEc1;
		terminate;
	}
	if(AchiveDieInSec1>=10 ){
		GiveActorInventory(0, "DSCarmorBonus", AchiveKillInSEc1);
		Log(s:"Yeah...Great bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 4);
		SaintHealthUpMultipler+=AchiveKillInSEc1;
		terminate;
	}
	if(AchiveDieInSec1>3){
		GiveActorInventory(0, "DSCarmorBonus", AchiveKillInSEc1);
		Log(s:"Bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 3);
		SaintHealthUpMultipler+=AchiveKillInSEc1;
		terminate;
	}

	if(AchiveKillInSEc1==3){
		GiveActorInventory(0, "DSCarmorBonus", AchiveKillInSEc1);
		Log(s:"Tripple death\n", i:AchiveKillInSEc1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 2);
		SaintHealthUpMultipler+=AchiveKillInSEc1;
		terminate;
	}
	if(AchiveKillInSEc1==2){
		//ArmorBonusToGive = AchiveKillInSEc1;
		GiveActorInventory(0, "DSCarmorBonus", AchiveKillInSEc1);
		Log(s:"Double death\n", i:AchiveKillInSEc1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 1);
		SaintHealthUpMultipler+=2;
		terminate;
	}
	AchiveKillInSEc1 = 0;
	AchiveDieInSec1 = 0;

}

Script "TimeKillVoiceSec1" (int soundID){
	ACS_NamedExecuteAlways("MuteMusic", 0, 35+15);
	delay(15);
	for(int i = 0; i<=9; i++){
		SoundVolume (0, i, 0.0);
	}
	switch (soundID) {
		case 1:
		PlaySound (0, "world/DSCACHV2" , 64, 1.0, false, ATTN_NONE);
		break;
		case 2:
		PlaySound (0, "world/DSCACHV4" , 64, 1.0, false, ATTN_NONE);
		break;
		case 3:
		PlaySound (0, "world/DSCACHV5" , 64, 1.0, false, ATTN_NONE);
		break;
		case 4:
		PlaySound (0, "world/DSCACHV6" , 64, 1.0, false, ATTN_NONE);
		break;
		case 5:
		PlaySound (0, "world/DSCACHV7" , 64, 1.0, false, ATTN_NONE);
		break;
		case 6:
		PlaySound (0, "world/DSCACHV8" , 64, 1.0, false, ATTN_NONE);
		break;
	}
	delay(35);
	for( i = 0; i<=7; i++){
		SoundVolume (0, i, 1.0);
	}
}

script "SaintHealthUp" (void){
	SetResultValue(SaintHealthUpMultipler*SaintHealthUpBaseAmount);
	SaintHealthUpMultipler = 0;
}

script "MonsterKilled" (void){
	AchiveKillInSEc1++;
	SaintHealthUpMultipler++;
	ACS_NamedExecute("AchiveKillInSEc1Counter", 0);

}

script "MonsterDied" (void){
	AchiveDieInSec1++;
	AchiveKillInSEc10++;
	ACS_NamedExecute("AchiveKillInSEc1Counter", 0);
	ACS_NamedExecute("AchiveKillInSEc10Counter", 0);
	//AchiveKillInSEc10++;
	//printBold(s:"kill");
	//ACS_NamedExecute("AchiveKillInSEc1Counter", 0);

}

Script "GetAmmoSlot" (void)
{
	SetResultValue(Random(0,AmmoMaxRnd));
}
Script "GetWeaponGotID" (void)
{
	SetResultValue(WeaponGotID);
}
Script "GetProgress" (void)
{
	SetResultValue((currentWave * 100) / maxWaveCount);
}

Script "GetLiveMonstersCount" (void)
{
	SetResultValue(SpawnedMonstersOnTheMap);
}


Script "NewMonsterIsSpawned" (int monstersCount)
{
	SpawnedMonstersOnTheMap = monstersCount;
}


function int GetTotalMonsters(void)
{
	if (!CheckActorClass(0, "BEDoomer") && !CheckActorClass(0, "BESemiDoomer") && !CheckActorClass(0, "DoomPlayer")){
		return SpawnedMonstersOnTheMap;
	}
	return ThingCount(T_NONE, 666666);
}




Script "DisplayInfo" ENTER
{
	//ACS_NamedExecute("KillAchivesStarter", 0);

	while (TRUE) {
		int mtotal = GetTotalMonsters();

		HudMessage(
		s:"\n", d:mtotal, s:" Monsters",
		s:"\n", d:(currentWave * 100) / maxWaveCount,s:" %", s:" Progress",
		s:"\n", d:TotalKills+GetLevelInfo (LEVELINFO_KILLED_MONSTERS), s:" Kills total";
		HUDMSG_PLAIN,20,CR_RED,1.0,0.3,1,0);
		Delay(35);
	}
}
//TotalKills

script "SpawnWave" (int zoneTid, int ScullTag, int WeaponTag)
{

		if( ScullTag != 888888 ){
			WaveOnline = true;
			if(!NOspawn){//debug thing
				Delay(35*3);
				AmbientSound("Howling",127);
				Delay(35*3);

				for(int i = 5; i > 0; i--)
				{
					Print(s:"Wave will come in ",d:i,s:" seconds");
					Delay(35);
				}
			}

		}
		if(!NOspawn){
			Thing_Activate(zoneTid);
		}
		if( ScullTag != 888888 ){
			if(!NOspawn){ //debug thing
				Delay(35*30);
			}

			while ( GetTotalMonsters()>0){ Delay(35); }

			PrintBold(s:"Wave ", d:CurrentWave+1,  s:" complete!");

			//ACS_NamedExecute("MapWaveControll", 0);

			CurrentWave ++;

			if(!NOspawn){//debug thing
				Delay(35*3);
			}
			Thing_Destroy(666667,0,0);//Previusly spawned vanilla weapon

			ACS_NamedExecute("SpawnWeapon", 0, WeaponTag);


			if(!NOspawn){//debug thing
			Delay(35*3);
			}
			ACS_NamedExecuteAlways("RestoreMusic", 0);

			SpawnSpotFacingForced("WaveScullDEC", ScullTag, 100600);

			SetThingSpecial(100600, ACS_NamedExecute, "NextWaveReady");

			WaveOnline = false;

		}
}

script "NextWaveReady" (void)
{

	NextWaveReady = true;
}





script "SpawnWeapon" (int WeaponTag)
{
	if(!WeaponTag){WeaponTag = 100400; }
	int progression = (currentWave * 100) / maxWaveCount ;
	//PrintBold(s:"Your progress ", d:progression, s:"%");
	Thing_Remove(666667);
	if(progression >= shotGunSpawnProgressInPercent && WeaponGotID<1)
	{

		PrintBold(s:"Shotgun spawned");
		AmmoMaxRnd = 1;
		WeaponGotID = 1;

		Thing_Activate(WeaponTag);
		//SpawnSpotFacingForced("Shotgun",weaponSpawnersTid[Random(0,weaponSpawnersCount-1)],0);
	}
	else if (progression >= SSGSpawnProgressInPercent && WeaponGotID<2)
	{
		PrintBold(s:"SuperShotgun spawned");
		WeaponGotID = 2;

		Thing_Activate(WeaponTag);
		//SpawnSpotFacingForced("SuperShotgun",weaponSpawnersTid[Random(0,weaponSpawnersCount-1)],0);
	}
	else if (progression >= ChaingunSpawnProgressInPercent && WeaponGotID<3)
	{
		PrintBold(s:"Chaingun spawned");
		WeaponGotID = 3;
		Thing_Destroy(666667,0,0);
		Thing_Activate(WeaponTag);
		//SpawnSpotFacingForced("Chaingun",weaponSpawnersTid[Random(0,weaponSpawnersCount-1)],0);
	}
	else if (progression >= RLSpawnProgressInPercent && WeaponGotID<4)
	{
		PrintBold(s:"RocketLauncher spawned");
		WeaponGotID = 4;
		AmmoMaxRnd = 2;

		Thing_Activate(WeaponTag);
		//SpawnSpotFacingForced("RocketLauncher",weaponSpawnersTid[Random(0,weaponSpawnersCount-1)],0);
	}
	else if (progression >= PlasmaGunSpawnProgressInPercent && WeaponGotID<5)
	{
		PrintBold(s:"PlasmaRifle spawned");
		WeaponGotID = 5;
		AmmoMaxRnd = 3;

		Thing_Activate(WeaponTag);
		//SpawnSpotFacingForced("PlasmaRifle",weaponSpawnersTid[Random(0,weaponSpawnersCount-1)],0);
	}
	else if (progression >= BFG9000SpawnProgressInPercent && WeaponGotID<6)
	{
		PrintBold(s:"BFG9000 spawned");
		WeaponGotID = 6;

		Thing_Activate(WeaponTag);
		//SpawnSpotFacingForced("BFG9000",weaponSpawnersTid[Random(0,weaponSpawnersCount-1)],0);
	}
}


Script "ScullHasCome" (void){
	PrintBold(s:"Mistic Scull has arrived.\nPick it up for continiue.");
}


Script "Mus_G1" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_G1", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_G2" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_G2", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_L1" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_L1", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_M1" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_M1", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_M2" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_M2", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_M3" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_M3", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}




Script "SetBattleMusic1" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("FIGHT_SM", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "SetBattleMusic2" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("FIGHT_MD", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "SetBattleMusic3" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("FIGHT_HD", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "SetBattleMusicDS" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("FIGHT_DS", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
		Delay(100);
		SetMusicVolume(2.0);
	}
}
Script "RestoreMusic" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("*", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}

//END LIBRARY
